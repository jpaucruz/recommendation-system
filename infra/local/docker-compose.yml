services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      EXTRA_ARGS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar=9200:/usr/share/jmx_exporter/components/zookeeper.yml
    volumes:
      - ./observability/jmx-exporter:/usr/share/jmx_exporter/
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5

  broker1:
    image: confluentinc/cp-enterprise-kafka:latest
    hostname: broker1
    container_name: broker1
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
      - "9200:9200"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker1:29092,broker2:29093,broker3:29094
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar=9200:/usr/share/jmx_exporter/components/broker.yml
    volumes:
      - ./observability/jmx-exporter:/usr/share/jmx_exporter/
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  broker2:
    image: confluentinc/cp-enterprise-kafka:latest
    hostname: broker2
    container_name: broker2
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9093:9093"
      - "9102:9101"
      - "9201:9201"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker2:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9102
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker1:29092,broker2:29093,broker3:29094
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar=9201:/usr/share/jmx_exporter/components/broker.yml
    volumes:
      - ./observability/jmx-exporter:/usr/share/jmx_exporter/
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9093"]
      interval: 30s
      timeout: 10s
      retries: 5

  broker3:
    image: confluentinc/cp-enterprise-kafka:latest
    hostname: broker3
    container_name: broker3
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9094:9094"
      - "9103:9101"
      - "9202:9202"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker3:29094,PLAINTEXT_HOST://localhost:9094
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9103
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker1:29092,broker2:29093,broker3:29094
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar=9202:/usr/share/jmx_exporter/components/broker.yml
    volumes:
      - ./observability/jmx-exporter:/usr/share/jmx_exporter/
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9094"]
      interval: 30s
      timeout: 10s
      retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      broker3:
        condition: service_healthy
    ports:
      - "8081:8081"
      - "9203:9203"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "broker1:29092,broker2:29093,broker3:29094"
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_JMX_OPTS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar=9203:/usr/share/jmx_exporter/components/schema-registry.yml
    volumes:
      - ./observability/jmx-exporter:/usr/share/jmx_exporter/
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8081"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  connect:
    image: cnfldemos/cp-server-connect-datagen:0.6.4-7.6.0
    hostname: connect
    container_name: connect
    depends_on:
      schema-registry:
        condition: service_healthy
    ports:
      - "8083:8083"
      - "9104:9101"
      - "9204:9204"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "broker1:29092,broker2:29093,broker3:29094"
      CONNECT_REST_ADVERTISED_HOST_NAME: "connect"
      CONNECT_GROUP_ID: "connect-group"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "connect-statuses"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_REST_PORT: 8083
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
      KAFKA_JMX_PORT: 9104
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar=9204:/usr/share/jmx_exporter/components/connect.yml
    volumes:
      - ./observability/jmx-exporter:/usr/share/jmx_exporter/

  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    hostname: control-center
    container_name: control-center
    depends_on:
      - connect
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "broker1:29092,broker2:29093,broker3:29094"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1

  init:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - connect
    volumes:
      - ./kafka:/scripts
    entrypoint: ["/bin/bash", "/scripts/init.sh"]

  postgres:
    image: postgres:latest
    hostname: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: 4dm1n
      POSTGRES_DB: recommendation-system
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./databases/init.sql:/docker-entrypoint-initdb.d/init.sql

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus:/etc/prometheus
      - prometheus_data:/prometheus

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./observability/grafana:/etc/grafana/provisioning/
      - grafana_data:/var/lib/grafana

  recommendation-system-ms:
    image: recommendation-system-ms:latest
    command: ["/bin/sh", "-c", "sleep 30 && exec /cnb/lifecycle/launcher"]
    hostname: recommendation-system-ms
    container_name: recommendation-system-ms
    ports:
      - "8080:8080"
    depends_on:
      - init
    environment:
        SPRING_APPLICATION_NAME: recommendation-system-ms
        USER_ACTION_TOPIC_NAME: user_actions
        SPRING_KAFKA_BOOTSTRAP_SERVERS: broker1:29092,broker2:29093,broker3:29094
        SPRING_KAFKA_PRODUCER_KEY_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
        SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER: io.confluent.kafka.serializers.KafkaAvroSerializer
        SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER: io.confluent.kafka.serializers.KafkaAvroDeserializer
        SPRING_KAFKA_CONSUMER_KEY_DESERIALIZER: org.apache.kafka.common.serialization.StringDeserializer
        SPRING_KAFKA_CONSUMER_PROPERTIES_DEFAULT_DESERIALIZATION_EXCEPTION_HANDLER: org.apache.kafka.clients.consumer.internals.DefaultDeserializationExceptionHandler
        SPRING_KAFKA_PROPERTIES_SCHEMA_REGISTRY_URL: http://schema-registry:8081
        SPRING_KAFKA_PROPERTIES_AUTO_REGISTER_SCHEMAS: false
        SPRING_KAFKA_STREAMS_APPLICATION_ID: recommendation-stream
        SPRING_KAFKA_STREAMS_BOOTSTRAP_SERVERS: broker1:29092,broker2:29093,broker3:29094
        SPRING_KAFKA_STREAMS_PROPERTIES_SCHEMA_REGISTRY_URL: http://schema-registry:8081
        MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,prometheus
        MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED: true
        SPRINGDOC_SWAGGER_UI_PATH: /swagger-ui.html
        SPRINGDOC_API_DOCS_PATH: /v3/api-docs.yaml
        SPRINGDOC_API_DOCS_ENABLED: true
        SPRINGDOC_SWAGGER_UI_ENABLED: true
        SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/recommendation-system
        SPRING_DATASOURCE_USERNAME: admin
        SPRING_DATASOURCE_PASSWORD: 4dm1n
        SPRING_DATASOURCE_DRIVER-CLASS-NAME: org.postgresql.Driver
        SPRING_JPA_HIBERNATE_DDL-AUTO: update
        SPRING_JPA_SHOW-SQL: true
        SPRING_JPA_HIBERNATE_NAMING_PHYSICAL-STRATEGY: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

  website:
    image: angular-website:latest
    hostname: website
    container_name: website
    ports:
      - "4200:80"
    depends_on:
      - recommendation-system-ms

volumes:
  prometheus_data:
  grafana_data:
  postgres_data: