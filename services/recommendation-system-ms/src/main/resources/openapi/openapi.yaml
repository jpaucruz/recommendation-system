openapi: 3.0.3
info:
  title: Swagger Recommendation System - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.
    
    Some useful links:
    - [The Recommendation System repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Recommendation System](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)

  #termsOfService: http://swagger.io/terms/
  contact:
    email: jesuspaucruz@gmail.com
  #license:
  #  name: Apache 2.0
  #  url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
#externalDocs:
#  description: Find out more about Swagger
#  url: http://swagger.io
#servers:
#  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: product
    description: Operations about product
  - name: user
    description: Operations about user
paths:
  /product:
    get:
      tags:
        - product
      summary: Get products from database
      operationId: getProducts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponseDTO'
  /user/{userId}/purchases:
    post:
      tags:
        - user
      summary: Register a purchase of the web user
      operationId: registerPurchase
      parameters:
        - name: userId
          in: path
          description: user ID that need to register purchase
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserPurchaseRequestDTO'
      responses:
        '201':
          description: created
  /user/{userId}/actions:
    post:
      tags:
        - user
      summary: Register specific actions of the web user
      operationId: registerAction
      parameters:
        - name: userId
          in: path
          description: user ID that need to register action
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserActionRequestDTO'
      responses:
        '201':
          description: created
  /user/{userId}/recommendations:
    get:
      tags:
        - user
      summary: Get products recommendations by user
      operationId: getRecommendations
      parameters:
        - name: userId
          in: path
          description: user ID that need to register action
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponseDTO'
components:
  schemas:
    ProductResponseDTO:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: product 1
        imageUrl:
          type: string
          example: images/product1.png
        description:
          type: string
          example: product description 1
        type:
          type: integer
          format: int32
          example: 1
    UserPurchaseRequestDTO:
      type: object
      properties:
        productId:
          type: string
        amount:
          type: integer
        timestamp:
          type: string
    UserActionRequestDTO:
      type: object
      properties:
        action:
          type: string
          enum: [ view, add-to-cart, purchase ]
        productId:
          type: string
        timestamp:
          type: string